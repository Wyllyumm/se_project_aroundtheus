!function(){"use strict";var e=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,this._settings=e,this._inputEls=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector)}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.textContent=e.validationMessage,t.classList.add(this._errorClass)}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent=null,t.classList.remove(this._errorClass)}_hasInvalidInput(e){return!e.every((e=>e.validity.valid))}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}toggleButtonState(){this._hasInvalidInput(this._inputEls)?this._disableButton():this._enableButton()}_setEventListeners(){this._inputEls.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}resetValidation(){this._inputEls.forEach((e=>{this._hideInputError(e)})),this.toggleButtonState()}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}};const t={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"};var s=class{constructor(e,t,s,r,i){this._name=e.name,this._link=e.link,this.id=e._id,this.isLiked=e.isLiked,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteCard=r,this._handleLikeCard=i}getId(){return this.id}setIsLiked(e){this.isLiked=e,this.handleLikeButton()}handleLikeButton(){this.isLiked?this._likeButton.classList.add("cards__like-button_active"):this._likeButton.classList.remove("cards__like-button_active")}handleDeleteButton(){this._deleteButton.closest(".card").remove()}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeCard(this)})),this._deleteButton.addEventListener("click",(()=>{this._handleDeleteCard(this)})),this._cardImage.addEventListener("click",(()=>this._handleImageClick({link:this._link,name:this._name})))}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getView(){return this._element=this._getTemplate(),this._element.querySelector(".cards__title").textContent=this._name,this._likeButton=this._element.querySelector(".cards__like-button"),this._deleteButton=this._element.querySelector(".cards__delete-button"),this._cardImage=this._element.querySelector(".cards__image"),this._cardImage.setAttribute("src",this._link),this._cardImage.setAttribute("alt",this._name),this.handleLikeButton(),this._setEventListeners(),this._element}};class r{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}class i{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t)}_escToCloseListener=e=>{"Escape"!==e.key&&"Esc"!==e.key||(e.preventDefault(),this.close())};open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._escToCloseListener)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._escToCloseListener)}setEventListeners(){this._popupCloseButton=this._popupElement.querySelector(".modal__close"),this._popupCloseButton.addEventListener("click",(()=>this.close())),this._popupElement.addEventListener("click",(e=>{e.target.classList.contains("modal_opened")&&this.close()}))}}class n extends i{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputList=[...this._popupForm.querySelectorAll(".modal__input")],this._submitButton=this._popupForm.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this.setLoading(!0),this._handleFormSubmit(this._getInputValues()),this._popupForm.reset(),this.close()}))}}const o=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}getProfileInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}patchProfileInfo(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.about})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}patchProfileAvatar(e){let{avatar:t}=e;return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})}).catch((e=>{console.error(e)}))}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}postCards(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}dislikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then((e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`))).catch((e=>{console.error(e)}))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"967eb4d1-2e88-4a75-bdf4-9be2dee67768","Content-Type":"application/json"}});o.getProfileInfo().then((e=>{let{name:t,about:s,avatar:r}=e;C.setUserInfo({name:t,about:s}),C.setAvatar({avatar:r})})),o.getInitialCards().then((e=>{new r({items:e,renderer:k},".cards__list").renderItems()}));const a=document.querySelector(".profile__image-edit-icon"),l=document.querySelector("#profile-edit-button"),c=document.querySelector("#profile-edit-modal"),d=document.querySelector("#card-add-modal"),u=document.querySelector("#avatar-modal"),h=document.querySelector("#card-add-button"),_=document.querySelector("#profile-title-input"),m=document.querySelector("#profile-description-input"),p=u.querySelector("#avatar-edit-form"),v=c.querySelector("#profile-edit-form"),E=d.querySelector("#add-card-form"),b=new class extends i{constructor(e){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._deleteConfirm=this._popupElement.querySelector("#confirm-delete-button")}setSubmit(e){this._handleDeleteConfirm=e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleDeleteConfirm(),this.close()}))}}("#delete-modal");function f(e){b.open(),b.setSubmit((()=>{o.deleteCard(e.getId()).then((()=>e.handleDeleteButton()))}))}function S(e){e.isLiked?o.dislikeCard(e.getId()).then((()=>{e.setIsLiked(!1)})):o.likeCard(e.getId()).then((()=>{e.setIsLiked(!0)}))}b.setEventListeners();const L=new r({items:[],renderer:k},".cards__list");function k(e){const t=function(e){return new s(e,"#card-template",y,f,S).getView()}(e);L.addItem(t)}const C=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:r}=e;this._nameElement=document.querySelector(t),this._jobElement=document.querySelector(s),this._avatarElement=document.querySelector(r)}getUserInfo(){return{name:this._nameElement.textContent,about:this._jobElement.textContent}}setUserInfo(e){let{name:t,about:s}=e;this._nameElement.textContent=t,this._jobElement.textContent=s}setAvatar(e){let{avatar:t}=e;this._avatarElement.src=t}}({nameSelector:".profile__title",jobSelector:".profile__description",avatarSelector:".profile__image"}),g=new class extends i{constructor(e){super({popupSelector:e}),this._previewImage=this._popupElement.querySelector("#preview-image"),this._previewCaption=this._popupElement.querySelector("#preview-image-caption")}open(e){this._previewImage.src=e.link,this._previewImage.alt=e.name,this._previewCaption.textContent=e.name,super.open()}}("#image-modal");function y(e){g.open(e)}g.setEventListeners();const I=new n("#card-add-modal",(function(e){o.postCards(e).then((()=>{k({name:e.name,link:e.link})})).finally((()=>{I.setLoading(!1)}))}));I.setEventListeners();const B=new n("#profile-edit-modal",(function(e){return o.patchProfileInfo(e).then((()=>{C.setUserInfo({name:e.name,about:e.about})})).finally((()=>{B.setLoading(!1)}))}));B.setEventListeners();const q=new n("#avatar-modal",(function(e){return o.patchProfileAvatar(e).then((()=>{C.setAvatar({avatar:e.avatar})}))}));q.setEventListeners(),l.addEventListener("click",(()=>{const{name:e,about:t}=C.getUserInfo();_.value=e,m.value=t,B.open(),w.resetValidation()})),h.addEventListener("click",(()=>{I.open(),j.toggleButtonState()})),a.addEventListener("click",(()=>{q.open(),$.toggleButtonState()}));const w=new e(t,v),j=new e(t,E),$=new e(t,p);w.enableValidation(),j.enableValidation(),$.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,